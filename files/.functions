# shellcheck disable=SC2148

# squashit - Squashes the current branch into a single commit and merges it into the main branch.
#
# Usage: squashit [main_branch]
#
# Arguments:
#   main_branch: The name of the main branch to merge the squashed branch into. Default is "main".
#
# Example:
#   squashit develop
#
# This function will:
#   1. Get the name of the current branch.
#   2. Checkout the main branch and pull the latest changes.
#   3. Create a temporary branch.
#   4. Squash the current branch into a single commit.
#   5. Commit the squashed changes.
#   6. Checkout the original branch and reset it to the temporary branch.
#   7. Delete the temporary branch.
#
# Note: This function will not push the changes to the remote repository.
function squashit() {
  local main_branch="${1:-main}"

  to_squash=$(git symbolic-ref --short -q HEAD)
  echo "Squashing ${to_squash}..."

  echo "Going back to main and refresh it..."
  git checkout -q "$main_branch"
  git pull -q origin "$main_branch"

  echo "Done. Going to a temp branch..."
  temp_branch="temp-${RANDOM}"

  echo "Creating temp branch ${temp_branch}..."
  git checkout -b "$temp_branch"

  echo "Done. Squashing ${to_squash}..."
  git merge --squash "$to_squash"

  echo "Squashed. Committing..."
  git commit -am "Squashed $to_squash"

  git checkout "$to_squash"
  git reset --hard "$temp_branch"

  echo "All done, deleting $temp_branch"
  git branch -D "$temp_branch"
}

function update() {
  if [ -e "bin/stubs/update" ]; then
    bin/stubs/update "$@"
  elif [ -e "bin/update" ]; then
    bin/update "$@"
  else
    command update "$@"
  fi
}

function dev() {
  if [ -e "bin/stubs/dev" ]; then
    bin/stubs/dev "$@"
  elif [ -e "bin/dev" ]; then
    bin/dev "$@"
  else
    command dev "$@"
  fi
}

function test(){
  if [ -e "bin/test" ]; then
    bin/test "$@"
  else
    command test "$@"
  fi
}

function kamal() {
  if [ -e "bin/stubs/kamal" ]; then
    bin/stubs/kamal "$@"
  elif [ -e "bin/kamal" ]; then
    bin/kamal "$@"
  else
    command kamal "$@"
  fi
}

function kal() {
  kamal accessory logs "$1"
}

function kar() {
  kamal accessory reboot "$1"
}

function karm() {
  kamal accessory remove "$1" -y
}

# # Merges a video with a subtitle file and encodes it to a new file.
# # Usage: encode_video video.mkv subtitle.srt
# function encode_video(){
#   local output_mkv="${1%}.sub.mkv"
#   # local srt_as_utf8="${2%}.utf8.srt"

#   # echo "Converting $2 to utf-8: $srt_as_utf8"
#   # iconv -f iso-8859-1 -t utf-8 < $2 > $srt_as_utf8
#   # echo "Done. Merging $1 and $srt_as_utf8..."

#   ffmpeg -i $1 -f srt -i $2 -map 0 -map 1 -c copy $output_mkv

#   # rm $srt_as_utf8
# }

# function encode_video_utf8(){
#   local output_mkv="${1%}.sub.mkv"
#   local srt_as_utf8="${2%}.utf8.srt"

#   echo "Converting $2 to utf-8: $srt_as_utf8"
#   iconv -f iso-8859-1 -t utf-8 < $2 > $srt_as_utf8
#   echo "Done. Merging $1 and $srt_as_utf8..."

#   ffmpeg -i $1 -f srt -i $srt_as_utf8 -map 0 -map 1 -c copy $output_mkv

#   rm $srt_as_utf8
# }
